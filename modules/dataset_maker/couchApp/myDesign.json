{
   "_id": "_design/genomic_browser",
   "_rev": "156-95b97db5976cc56d5ddaca2a9e10d4e4",
   "lists": {
       "dqt_search": "function (head, req) { var row, fields = [], conditions = {}; fields_param = JSON.parse(req.query.fields); Object.keys(fields_param).forEach(function (key1) { fields = fields.concat(Object.keys(fields_param[key1]).map(function(key2) {return ''.concat(key1,',',key2);})); }); conditions = JSON.parse(req.query.conditions);  this.inFields = function (key) {          return (fields.indexOf(''.concat(key[0],',',key[1])) != -1);      }; this.satisfies = function (keys, value, condition) {     nodeType = (typeof condition.children != 'undefined') ? 'group' : 'leaf'; verdict = true; switch (nodeType) {     case 'leaf':  var key = {'category': keys[0], 'element': keys[1], 'val': keys[2]};  if (condition.field == key.element && condition.instrument == key.category) {                 switch (condition.operator) {                       case 'equal':                           verdict = (key.val == condition.value);                            break;                       case 'notEqual':                           verdict = (key.val != condition.value);                           break;                       case 'lessThanEqual':                           verdict = (key.val <= condition.value);                           break;                       case 'greaterThanEqual':                           verdict = (key.val >= condition.value);                           break;                       case 'startsWith':                           verdict = (key.val.toString().indexOf(condition.value) == 0);                           break;                       case 'contains':                           verdict = (key.val.toString().indexOf(condition.value) != -1);                           break;                   }      }    return verdict;     break;     case 'group':  if (condition.activeOperator == '0') {  return condition.children.map(function(v,i,a) {return this.satisfies(keys, value, v);}, this).reduce(function(last,current,index) {return (last && current);}, true);   } else {return condition.children.map(function(v,i,a) {return this.satisfies(keys, value, v);}, this).reduce(function(last,current,index) {return (last || current);}, true);}      break;         }    };   start({'headers' : {'Content-Type' : 'application/json'}});   send(''.concat('{ \"result\" :[','\\n'));      while(row = getRow()) {           row.selected = (this.inFields(row.key)); row.filteredOut = !(this.satisfies(row.key, row.id, conditions)); if( row.selected || row.filteredOut) {send(''.concat(JSON.stringify(row),',\\n')); }              } send(''.concat('{\"done\": true}]}','\\n'));}"
   }
}
