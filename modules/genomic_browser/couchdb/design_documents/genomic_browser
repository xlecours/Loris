{"_id":"_design/genomic_browser","_rev":"19-c3da50482be15c24e4cc75f6233c406f","language":"javascript","views":{"samples_by_dataset":{"map":"function(doc) {\n  if (doc.meta.doctype == \"dataset\") {\n    var samples_start_index = doc.headers.length - doc.meta.sample_count; \n    emit(doc.meta.variable_type,doc.headers.slice(samples_start_index));\n  }\n}","reduce":"function (keys, values, rereduce) {\n    return values[0].length;\n}"},"betavalue_by_probe_name":{"map":"function(doc) {\n  if (doc.meta.doctype == \"betavalue\") {\n    var key = [doc.meta.identifier.LORIS_file_id, doc.meta.identifier.probe_name];\n    emit(key, doc.data);\n  }\n}","reduce":"function (keys, values, rereduce) {\n    return values[0].length;\n}"},"betavalue_by_genomic_location":{"map":"function(doc) {\n  if (doc.meta.doctype == \"betavalue\") {\n    var key = [doc.meta.identifier.LORIS_file_id, doc.meta.identifier.chromosome, Number(doc.meta.identifier.location),doc.meta.identifier.probe_name];\n    emit(key, doc.data);\n  }\n}"},"variable_annotation":{"map":"function(doc) {\n  if (doc.annotation) {\n    Object.keys(doc.annotation).forEach(function(a) {\n      var key = [ doc.meta.doctype, a, doc.annotation[a]];\n      var value = [doc.meta.identifier.LORIS_file_id, doc.meta.identifier.probe_name];\n      emit(key, value );\n    },this);\n  }\n}","reduce":"_count"}},"lists":{"betavalue_by_sample_name":"function(head, req) {    start({'headers': {'Content-Type': 'text/plain'}}); \n    var PSCIDs = JSON.parse(req.query.PSCIDs); \n    var keys = Object.keys(PSCIDs);\n    var indexes = keys.map(function(k) {return PSCIDs[k]; });     \n\n    send(''.concat('id,',keys.toString(),'\\n'));    \n    while(row = getRow()){ \n        var filtered = row.value.filter(function(e,i,a) {\n            return (indexes.indexOf(i) != -1);\n        });    \n        send(''.concat(row.id,',',filtered,'\\n'));\n    }\n}","methylation":"function(head, req) { start({'headers': {'Content-Type': 'application/json'}}); var data_table = {}; var row_count = 0; var column_totals = {}; while (row = getRow()) {var obj = data_table[row.key[0]] || {}; obj[row.key[1]] = row.value; data_table[row.key[0]] = obj; row_count++; column_totals[row.key[1]] = column_totals[row.key[1]] || 0; column_totals[row.key[1]]++ } send('{ \"data\" :'); send(JSON.stringify(data_table)); send(', \"row_count\": '); send(JSON.stringify(row_count)); send(', \"column_totals\": '); send(JSON.stringify(column_totals)); send('}');}"}}
