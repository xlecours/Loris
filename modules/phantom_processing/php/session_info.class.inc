<?php
/**
 * Endpoint for phantom_processing
 *
 * PHP Version 7
 *
 * @category   Endpoint
 * @package    Imaging
 * @subpackage Processing
 * @author     Xavier Lecours Boucher <xavier.lecoursboucher@mcgill.ca>
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link       https://www.github.com/aces/Loris-Trunk/
 */
namespace LORIS\phantom_processing;

use \Psr\Http\Message\ServerRequestInterface;
use \Psr\Http\Message\ResponseInterface;
use \Psr\Http\Server\RequestHandlerInterface;

/**
 * Endpoint handler for phantom_processing
 *
 * PHP Version 7
 *
 * @category   Endpoint
 * @package    Imaging
 * @subpackage Processing
 * @author     Xavier Lecours Boucher <xavier.lecoursboucher@mcgill.ca>
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link       https://www.github.com/aces/Loris-Trunk/
 */
class Session_Info extends \NDB_Page
{
    public $skipTemplate = true;

    protected $timepoint;

    /**
     * Returns false if user does not have access to page.
     *
     * @return bool
     */
    function _hasAccess()
    {
        return \NDB_Factory::singleton()
            ->user()
            ->hasPermission('phantom_processing');
    }

    /**
     * An NDB_Page can act as both a middleware, or a handler, depending on the
     * context. When treated as a middleware, the page is responsible for setting
     * up any middleware required to access the page. By default, this will
     * implement the page decoration middlewares which is responsible for adding
     * the LORIS menu's/headers/footers/etc.
     * This can be overridden by modules who don't want this behaviour (such
     * as API endpoints).
     *
     * @param ServerRequestInterface  $request The PSR7 request being processed.
     * @param RequestHandlerInterface $handler The handler to handle the request
     *                                         after processing the middleware.
     *
     * @return ResponseInterface the PSR15 response that was generated by the
     * middleware
     */
    public function process(
        ServerRequestInterface $request,
        RequestHandlerInterface $handler
    ) : ResponseInterface {
        $this->timepoint = \TimePoint::singleton(
            $request->getQueryParams()['sessionid'] ?? null
        );

        $accept = $request->getHeaderLine('Accept');
        if (preg_match('/application\/json/', $accept) === 1) {
            return $this->handle($request)
                ->withHeader('Content-Type', 'application/json');
        }

        $request = $request->withAttribute(
            'pageclass',
            $this
        );
        $user    = $request->getAttribute("user");
        return (new \LORIS\Middleware\PageDecorationMiddleware($user))
            ->process(
                $request,
                new \LORIS\Http\StringStream('')
            )->withHeader("Content-Type", "text/html");
    }

    /**
     * Handles a request and produces a response.
     *
     * @param ServerRequestInterface $request The PSR7 request being processed.
     *
     * @return ResponseInterface the PSR15 response
     */
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        return $this->handleGET($request);
    }

    /**
     * Specialized handler for GET requests
     *
     * @param ServerRequestInterface $request The PSR7 request being processed.
     *
     * @return ResponseInterface the PSR15 response
     */
    public function handleGET(ServerRequestInterface $request): ResponseInterface
    {
        return (new \Zend\Diactoros\Response())
            ->withBody(
                new \LORIS\Http\StringStream($this->toJSON())
            );
    }

    /**
     * Returns a json string representation of this page's data
     *
     * @return string
     */
    protected function toJSON(): string
    {
        return json_encode($this->toArray());
    }

    /**
     * Returns an array representation of this page's data
     *
     * @return array
     */
    protected function toArray(): array
    {
        return array(
                'sessioninfo'      => json_encode($this->timepoint),
               );
    }

}

